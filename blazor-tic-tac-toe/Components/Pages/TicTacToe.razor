@page "/tic-tac-toe"
@rendermode InteractiveServer

<PageTitle>Tic-Tac-Toe</PageTitle>

<h1>Tic-Tac-Toe @(play ? "- Playing - Player "+ @player : "") - Moves @moves</h1>

@if (win) {
	@if (draw) {
		<h2 class="text-center text-success">DRAW!</h2>
	} else {
		<h2 class="text-center text-success">Player @player WON!</h2>
	}
}

<div class="container text-center">
  @if (play == true) {
    <div class="row @(win ? "disabled" : "")">
      <div class="col p-5 clickable border-bottom border-end" @onclick="@(e => onClickSelect(0,0))">
        @board[0,0]
      </div>
      <div class="col p-5 clickable border-start border-bottom border-end" @onclick="@(e => onClickSelect(0,1))">
        @board[0,1]
      </div>
      <div class="col p-5 clickable border-bottom border-start" @onclick="@(e => onClickSelect(0,2))">
        @board[0,2]
      </div>
    </div>
    <div class="row">
      <div class="col p-5 clickable border-bottom border-top border-end" @onclick="@(e => onClickSelect(1,0))">
        @board[1,0]
      </div>
      <div class="col p-5 clickable border-start border-bottom border-top border-end" @onclick="@(e => onClickSelect(1,1))">
        @board[1,1]
      </div>
      <div class="col p-5 clickable border-start border-bottom border-top" @onclick="@(e => onClickSelect(1,2))">
        @board[1,2]
      </div>
    </div>
    <div class="row">
      <div class="col p-5 clickable border-top border-end" @onclick="@(e => onClickSelect(2,0))">
        @board[2,0]
      </div>
      <div class="col p-5 clickable border-start border-top border-bottom border-end" @onclick="@(e => onClickSelect(2,1))">
        @board[2,1]
      </div>
      <div class="col p-5 clickable border-start border-top" @onclick="@(e => onClickSelect(2,2))">
        @board[2,2]
      </div>
    </div>
    @if (win) {
      <div class="row">
        <button class="btn btn-primary" @onclick="onClickRestart">Restart</button>
      </div>
    } else {
      <div class="row">
        <button class="btn btn-danger" @onclick="onClickQuit">Quit</button>
      </div>
    }
  } else {
    <div class="row">
      <button class="btn btn-success" @onclick="onClickPlay">Play</button>
    </div>
  }
</div>

@code {
  private bool play = false;
  private string[,] board = {{"","",""}, {"","",""}, {"","",""}};
  private string player = "X";
  private bool win = false;
	private bool draw = false;
	private int moves = 0;

  // This will run code when the page has loaded
  protected override void OnInitialized() {
    // Console.WriteLine(board);
  }

  private void onClickPlay()
  {
    play = true;
  }

  private void onClickQuit()
  {
    play = false;
		reset();
  }

	private void onClickRestart()
	{
		reset();
	}

  private void onClickSelect(int x, int y)
  {
    if (!win) {
      board[x, y] = player;

      changePlayer();
    }
  }

  private void changePlayer()
  {
		moves++;

    // Play is the opposite of the win state
    win = checkWin();

    // If there was no winner change player
    if (!win) {
      switch(player)
      {
        case "X":
          player = "O";
          break;
        case "O":
          player = "X";
          break;
      }
    }
    
  }

	private void reset()
	{
		// Reset the game state
		board = new string[,] {{"","",""}, {"","",""}, {"","",""}};
		play = true;
		player = "X";
		win = false;
		draw = false;
		moves = 0;
	}

  private bool checkWin()
  {
    // Check for a row or column win
    for (int i = 0; i < 3; i++) {
      if (((board[i,0] != "" || board[i,1] != "" || board[i,2] != "") && 
      (board[i,0] == board[i,1]) && (board[i,1] == board[i,2]))
      ||
			((board[0,i] != "" || board[1,i] != "" || board[2,i] != "") && 
      (board[0,i] == board[1,i]) && (board[1,i] == board[2,i])))
      {
        return true;
      }
    }

    // Check for diagonal win
    if (((board[0,0] != "" || board[1,1] != "" || board[2,2] != "") &&
      (board[0,0] == board[1,1] && board[1,1] == board[2,2]))
      ||
      ((board[0,2] != "" || board[1,1] != "" || board[2,0] != "") &&
      (board[0,2] == board[1,1] && board[1,1] == board[2,0])))
    {
      return true;
    }

		if (moves == 9) {
			draw = true;
			return true;
		}

    return false;
  }
}
